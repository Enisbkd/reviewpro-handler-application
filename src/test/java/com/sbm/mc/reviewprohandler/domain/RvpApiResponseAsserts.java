package com.sbm.mc.reviewprohandler.domain;

import static com.sbm.mc.reviewprohandler.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RvpApiResponseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiResponseAllPropertiesEquals(RvpApiResponse expected, RvpApiResponse actual) {
        assertRvpApiResponseAutoGeneratedPropertiesEquals(expected, actual);
        assertRvpApiResponseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiResponseAllUpdatablePropertiesEquals(RvpApiResponse expected, RvpApiResponse actual) {
        assertRvpApiResponseUpdatableFieldsEquals(expected, actual);
        assertRvpApiResponseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiResponseAutoGeneratedPropertiesEquals(RvpApiResponse expected, RvpApiResponse actual) {
        assertThat(expected)
            .as("Verify RvpApiResponse auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiResponseUpdatableFieldsEquals(RvpApiResponse expected, RvpApiResponse actual) {
        assertThat(expected)
            .as("Verify RvpApiResponse relevant properties")
            .satisfies(e -> assertThat(e.getSurveyId()).as("check surveyId").isEqualTo(actual.getSurveyId()))
            .satisfies(e -> assertThat(e.getLodgingId()).as("check lodgingId").isEqualTo(actual.getLodgingId()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getDate()))
            .satisfies(
                e -> assertThat(e.getOverallsatsifaction()).as("check overallsatsifaction").isEqualTo(actual.getOverallsatsifaction())
            )
            .satisfies(e -> assertThat(e.getCustomScore()).as("check customScore").isEqualTo(actual.getCustomScore()))
            .satisfies(e -> assertThat(e.getPlantorevisit()).as("check plantorevisit").isEqualTo(actual.getPlantorevisit()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiResponseUpdatableRelationshipsEquals(RvpApiResponse expected, RvpApiResponse actual) {}
}
